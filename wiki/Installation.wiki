#summary Installing python-zibopt
#labels Featured

= Building & Installing python-zibopt =

== Prerequisites ==

This documentation was written with Ubuntu in mind, so you may need to translate the commands to your platform, but the procedure should be the same.  Before we can build python-zibopt, we need shared object libraries for !SoPlex and SCIP as well as setuptools for Python 3.2:

{{{
sudo apt-get install build-essential python3 python3-dev python3-setuptools
}}}

We'll assume you have a directory named src in your home for building things, and one named lib for putting the .so files in:

{{{
mkdir ~/src
mkdir ~/lib
}}}

Download the latest version of [http://zibopt.zib.de/download.shtml ZIBopt] and the latest version of [http://code.google.com/p/python-zibopt/downloads/list python-zibopt] to the src directory referenced above.  Uncompress and build SoPlex and SCIP, then copy their .so files to your lib:

{{{
cd ~/src
tar xvfz ziboptsuite-2.0.1.tgz
cd ziboptsuite-2.0.1/
}}}

If you are running on x86_64, you will need an extra make file to build the .so for !SoPlex.  Run the following to create this:

{{{
tar xvfz soplex-1.5.0.tgz
cat << "EOF" > soplex-1.5.0/make/make.linux.x86_64.gnu.opt-shared
CXX		=	g++
CPPFLAGS	=	-Isrc -DNDEBUG  -m64 -fPIC
CXXFLAGS	=	-O3 -mtune=native -fexceptions -fomit-frame-pointer # -malign-double -ffast-math
LDFLAGS		=	-m64 -lm -Wl,-rpath,$(CURDIR)/$(LIBDIR)
ARFLAGS		=	crs
ZLIB_FLAGS	=
ZLIB_LDFLAGS 	=	-lz
LIBBUILD        =       $(CXX)
LIBBUILDFLAGS   =	-shared -m64 -fPIC
LIBBUILD_o      =       -o # the trailing space is important
LIBEXT		=	so
ARFLAGS         =
RANLIB          =
EOF
}}}

To build SCIP against Ipopt, it requires that the libipopt.so file have a certain name not provided by the .deb.  Do the following to get around this:

{{{
ln -s /usr/lib/libipopt.so.0.0.0 ~/lib/libipopt.linux.x86_64.gnu.opt-shared.so
export LIBRARY_PATH=$HOME/lib
}}}

You should now be able to build the .so files:

{{{
make LPSOPT=opt-shared OPT=opt-shared ZIMPL=false ZLIB=false READLINE=false IPOPT=true IPOPTOPT=opt-shared IPOPT_FLAGS="-I/usr/include/coin" IPOPT_LDFLAGS="-ldmumps"
}}}

Copy the .so files for SCIP to your ~/lib directory and create symbolic links to their latest versions (your file names may be slightly different):

{{{
cp soplex-1.5.0/lib/libsoplex-1.5.0.linux.x86_64.gnu.opt-shared.so ~/lib/
cp scip-2.0.1/lib/liblpispx-2.0.1.linux.x86_64.gnu.opt-shared.so ~/lib/
cp scip-2.0.1/lib/libnlpi.ipopt-2.0.1.linux.x86_64.gnu.opt-shared.so ~/lib/
cp scip-2.0.1/lib/libobjscip-2.0.1.linux.x86_64.gnu.opt-shared.so ~/lib/
cp scip-2.0.1/lib/libscip-2.0.1.linux.x86_64.gnu.opt-shared.so ~/lib/
ln -s ~/lib/libsoplex-1.5.0.linux.x86_64.gnu.opt-shared.so ~/lib/libsoplex.so
ln -s ~/lib/liblpispx-2.0.1.linux.x86_64.gnu.opt-shared.so ~/lib/liblpispx.so
ln -s ~/lib/libnlpi.ipopt-2.0.1.linux.x86_64.gnu.opt-shared.so ~/lib/libnlpi.ipopt.so
ln -s ~/lib/libobjscip-2.0.1.linux.x86_64.gnu.opt-shared.so ~/lib/libobjscip.so
ln -s ~/lib/libscip-2.0.1.linux.x86_64.gnu.opt-shared.so ~/lib/libscip.so
}}}

== Building python-zibopt ==

In order to build and use python-zibopt, we need to reference the C header files and .so files for ZIBopt in our environment.  Once it is built, you'll need to keep the LD_LIBRARY_PATH set, possibly in your .bashrc, in order to use it:

{{{
export LD_LIBRARY_PATH=$HOME/lib
export LIBRARY_PATH=$HOME/lib
export C_INCLUDE_PATH=$HOME/src/ziboptsuite-2.0.1/scip-2.0.1/src/
}}}

Now we build python-zibopt:

{{{
cd ~/src
tar xvfz python-zibopt-0.7.dev-r191.tar.gz
cd python-zibopt-0.7.dev-r191/
python3 setup.py build
}}}

Test the library to make sure it is in working order:

{{{
python3 setup.py test
}}}

You should see output to the effect of:

{{{
running test
running egg_info
[... snip ...]
testAlgebraicConstraints (tests.constraints.ConstraintTest)
Tests algebraic format for solver.constraint(...) ... ok
testConstraintsAndObjective (tests.constraints.ConstraintTest)
Linear combinations of variables create constraints or objectives ... ok

----------------------------------------------------------------------
Ran 50 tests in 0.380s

OK
}}}

And finally install it:

{{{
sudo python3 setup.py install 
}}}

== Verifying Your Installation ==

You should now be able to do this without getting any errors:

{{{
python3
Python 3.2 (r32:88445, Mar 25 2011, 19:56:22) 
[GCC 4.5.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.

>>> import zibopt
>>> zibopt.__version__
'0.7'
>>> zibopt.scip.solver()
<zibopt.scip.solver object at 0xb7d28cd4>
>>> exit()
 
python3 examples/sudoku.py 
[3, 1, 8, 6, 9, 2, 7, 4, 5]
[7, 6, 4, 3, 5, 1, 8, 9, 2]
[2, 9, 5, 8, 7, 4, 3, 1, 6]
[6, 2, 9, 5, 1, 7, 4, 8, 3]
[1, 4, 7, 2, 8, 3, 5, 6, 9]
[8, 5, 3, 4, 6, 9, 1, 2, 7]
[5, 7, 2, 1, 4, 6, 9, 3, 8]
[4, 8, 6, 9, 3, 5, 2, 7, 1]
[9, 3, 1, 7, 2, 8, 6, 5, 4]
}}}