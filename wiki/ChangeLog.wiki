#summary python-zibopt change log
#labels Featured

= 0.6 dev =
  * Issue 16: Added ability to stop the solver after a number of solutions are found
{{{
solver.maximize(nsol=30)
}}}

= 0.5 beta =
  * Entered beta testing
  * Removed dependency on ZIMPL libraries; improved installation docs
  
= 0.4 dev =
  * Issue 8: Added an algebraic interface for constraints and objective functions
{{{
solver += 4 <= 3*x1 + 4*x2 + 2*x3 <= 10
solver.maximize(objective=x1 + 2*x2 + x3)

solver += sum(x[i] for i in rows) == 1
solver.minimize(objective=sum(cost[i] * x[i] for i in rows))
}}}
  * Issue 12: Added access to branching priority for variables
{{{
x = solver.variable(scip.INTEGER)
x.priority = 1000

x = solver.variable(scip.INTEGER, priority=10)
}}}

= 0.3 dev =
  * Issue 3 and Issue 4: Added access for more solver settings
{{{
solver.branching['inference'].priority = 10000
solver.branching['inference'].maxdepth = -1
solver.branching['inference'].maxbounddist = -1

solver.conflict['logicor'].priority = 10000

solver.heuristics['octane'].priority = 500
solver.heuristics['octane'].maxdepth = -1
solver.heuristics['octane'].frequency = 10
solver.heuristics['octane'].freqofs = 5

solver.presolvers['dualfix'].priority = 10000

solver.propagators['pseudoobj'].priority = 1000s.branching.keys
solver.propagators['pseudoobj'].frequency = 10

solver.selectors['bfs'].stdpriority = 1000
solver.selectors['bfs'].memsavepriority = 10

solver.separators['clique'].priority = 10000
solver.separators['clique'].maxbounddist = -1
solver.separators['clique'].frequency = 10000
}}}

= 0.2 dev =
  * Issue 1: Added gap and absgap keywords to maximize/minimize to stop when gap is within a certain limit
{{{ 
solver.maximize(absgap=0.5, gap=100) 
}}}
  * Issue 1: Added time keyword to maximize/minimize to return best solution after a number of seconds
{{{ 
solver.maximize(time=500) 
}}}
  * Removed solution.feasible, added solution.infeasible, unbounded, inforunbd, and optimal
  * Tested against SCIP 1.2
  * Issue 2: Added ability to change priority, maxdepth, and maxbounddist on branching rules:
{{{
solver.branching['inference'].priority = 10000
solver.branching['mostinf'].maxdepth += 2
print(solver.branching['pscost'].maxbounddist)
}}}
  * Added ability to set priorities on conflict handlers and separators:
{{{
solver.separators['clique'].priority = 10000
solver.conflict['logicor'].priority = 10000
}}}

= 0.1 dev =
  * Initial libraries for interfacing to solver, variables, constraints, and solutions
  * Ability to turn off solver verbosity
  * Solutions are false in case of infeasibilty or unboundedness
  * SCIP errors get mapped to Python exception types
  * The solver can be restarted with additional constraints and variables
  * Primal solutions can be fed to minimize/maximize and are checked for feasibility